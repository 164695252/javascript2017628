### this的总结-不全：
1、 当元素身上的事件被触发的时候，会执行一个函数，函数中的this指向当前这个元素
2、 自执行函数中的this，永远都是window
3、 当函数被调用的时候，点前面是谁，this就是谁； 如果前面没有点，说明这个函数被window调用，this就是window；
4、 回调函数中的this，一般都是window；如果需要的话，我们可以改变回调函数中的this指向；
```
//回调函数：当把函数的定义阶段，作为参数，传给另一个函数的时候，这个函数就是回调； 回调简称：callback /  cb
ary.sort(function(){})
ary.forEach(function(){},thisArg)
ary.map(cb,thisArg)
```
### 数组常用的方法
- 增加，删除和替换：都影响原始数组
    + push()
    + pop()
    + unshift
    + shift
    + splice
        + splice(1)/ splice(1,3)  删除
        + splice(2,0,'xxx') 添加
        + splice(2,2,'xxx','xxx') 替换
- 克隆和拼接
    + slice(n,m) 包前不包后
    + concat()  数组拼接
- 翻转和排序
    + reverse()
    + sort(function(a,b){ return a-b })
- 数组转字符串
    + toString()
    + join()
        + eval() 把字符串作为JS代码来执行；
- 常用但不兼容
    + indexOf()   没有-1；
    + forEach()
    + map()

### Math
- Math.floor
- Math.ceil
- Math.abs
- Math.pow
- Math.sqrt
- Math.round
- Math.max
- Math.min
- Math.random()
    + 公式： Math.round(Math.random()*(m-n)+n)

### 数组去重
- 双重循环
- sort思想
- 新数组
- 对象不重名
- 对象不重名，记录次数

### 算法
- 快排：
- 插排
- 冒排

### 字符串常用方法

#### 通过下标找字符串
- charAt()  通过下标找字符
- charCodeAt()  通过下标找到字符的unicode编码；

### 通过字符找下标；
- indexOf()    从前往后找，找到返回对应内容的索引，找不到返回-1；
- lastIndexOf()  从后往前找，找到返回对应内容的索引，找不到返回-1；

### 字符串的截取和查找
- str.slice(n,m) 从索引n找到索引m,包前不包后；slice可以取负值；
- str.substring(n,m) 从索引n找到索引m，包前不包后；
    + slice和substring的功能一样，但是slice可以取负值，而substring不能取负值；
- str.substr(n,m) 从索引n开始，截取m个；

### 字符串转数组
- split(切割形式)

### 字符串转大小写
- toUpperCase() 转大写；
- toLowerCase() 转小写；


### 字符串跟正则配合的方法；
- replace(要替换的字符串／正则，替换成什么／cb的返回值)  字符串替换
- search(查找的字符串／正则)
- split(切割形式／正则)
- match(字符串／正则) 可以把捕获到的内容，以数组的形式返回；如果是捕获一个，返回的数组有三项：1）item 2）index 3）input
如果捕获到一堆，把所有捕获到的内容，以数组的形式返回；他主要用来配合正则
    + match捕获不到的时候，返回的null；

### 小题：把str="zhongguo"改成"Zhongguo"用字符串常用方法来实现；
- 思路1： str.slice(0,1).toUpperCase()+str.slice(1)
- 思路2： str.charAt(0).toUpperCase()+str.slice(1)
- 思路3： str=str.replace('z','Z');

### i++ 和 ++i的区别：
- i++ 先运算后++；++只是针对变量自身的累加，跟运算没有关系；
- 先++ 后运算； ++参与了运算；

### 定时器
- setInterval（clearInterval）隔一段时间触发一次
- setTimeout （clearTimeout)  时间到的时候只执行一次；

### 日期对象
- 定义一个日期对象  var oDate=new Date()
- 获取现在距离 1970年1月1日 00：00：00 的毫秒数   oDate.getTime();
    + 格林尼治时间
- oDate.getFullYear()
- oDate.getMonth()+1  记得获取月份一定要+1；
- oDate.getDate()  日
- oDate.getDay() 星期  注意：星期日是0；
- oDate.getHours()
- oDate.getMinutes()
- oDate.getSeconds()

### 实战
- 时钟   日期对象+定时器
    + 注意：1）1位数转成两位数
           2） 一秒钟页面空白的处理；
- 倒计时
    + 设置未来时间 new Date('2018/10/12 18:00:00')
    + 求毫秒差
        + new Date('2018/10/12 18:00:00')-new Date()
        + new Date('2018/10/12 18:00:00').getTime()-new Date().getTime()
    + 秒转换：把秒转成 天，时，分，秒 ； 主要用到%的思想；
    + 注意：当秒位负数的时候，需要做处理；

### 判断
- if...else....
- switch。。case
- 三目 也叫做 三元表达式
    + 语法： 条件？执行语句1 ： 执行语句2；
### 数字如何转为字符串
    + ''+num

### 思考题和作业
--  请用setTimeout实现setInterval;比如 0 1 2 3 4 5关闭定时器；
- 国外的星期1234560，请把这个变成中国的 一二三四五六日；请至少写出3种方法；
    '0123456'转成'日一二三四五六'
- 请把以前用数组展示的随机验证码，改成用字符串展示，并且，里面不能有不兼容的方法；
- 今天必须熟练掌握的知识点
    + 定时器和日期对象
    + 时钟
    + 倒计时































